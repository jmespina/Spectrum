;-------------------------------------------------------------
; Este es el archivo adonde voy a poner todas las rutinas creadas por otras personas.
; Antes de una rutina, viene de donde la he sacado.
; Hay algunos cambios menores que documentare.
;-------------------------------------------------------------



; Rutinas de https://wiki.speccy.org/cursos/ensamblador/teclado


;-------------------------------------------------------------
; LEER_TECLADO: Lee el estado de O, P, Q, A, y devuelve
; en A el estado de las teclas (1=pulsada, 0=no pulsada).
; El byte está codificado tal que:
;
; BITS            3    2     1   0
; SIGNIFICADO   LEFT RIGHT DOWN  UP
;-------------------------------------------------------------
LEER_TECLADO:
    ld d, 0
    ld bc, $fbfe
    in a, (c)
    bit 0, a                   ; Leemos la tecla Q
    jr nz, Control_no_up       ; No pulsada, no cambiamos nada en D
    set 0, d                   ; Pulsada, ponemos a 1 el bit 0
Control_no_up:
 
    ld bc, $fdfe
    in a, (c)
    bit 0, a                   ; Leemos la tecla A
    jr nz, Control_no_down     ; No pulsada, no cambianos nada en D
    set 1, d                   ; Pulsada, ponemos a 1 el bit 1
Control_no_down:
 
    ld bc, $dffe
    in a, (c)
    bit 0, a                   ; Leemos la tecla P
    jr nz, Control_no_right    ; No pulsada
    set 2, d                   ; Pulsada, ponemos a 1 el bit 2
 
Control_no_right:
                               ; BC ya vale $dffe, (O y P en misma fila)
    bit 1, a                   ; Tecla O
    jr nz, Control_no_left
    set 3, d
Control_no_left:
 
    ld a, d                    ; Devolvemos en A el estado de las teclas
    ret




; Rutinas de https://wiki.speccy.org/cursos/ensamblador/gfx5_mapeados 

 
;---------------------------------------------------------------
; DrawMap_16x16_Map:
; Imprime una pantalla de tiles de 16x16 pixeles.
;
; Entrada (paso por parametros en memoria):
; Direccion             Parametro
; --------------------------------------------------------------
; DM_SPRITES (2 bytes)  Direccion de la tabla de tiles.
; DM_ATTRIBS (2 bytes)  Direccion de la tabla de atributos.
; DM_MAP     (2 bytes)  Direccion de la pantalla en memoria.
; DM_COORD_X (1 byte)   Coordenada X-Inicial en baja resolucion.
; DM_COORD_Y (1 byte)   Coordenada Y-Inicial en baja resolucion.
; DM_WIDTH   (1 byte)   Ancho del mapa en tiles
; DM_HEIGHT  (1 byte)   Alto del mapa en tiles
; DM_MAPX    (2 bytes)  Coordenada X en mapa.
; DM_MAPY    (2 bytes)  Coordenada Y en mapa.
;---------------------------------------------------------------
DrawMap_16x16_Map:
 
    ld ix, (DM_MAP)           ; IX apunta al mapa
    EXX
    LD DE, (DM_MAP10x10)           ; DE apunta al mapa de colisiones 
    EXX
	
    ;;; NUEVO: Posicionamos el puntero de mapa en posicion inicial.
    ld hl, (DM_MAPY)
    ld de, (ANCHO_MAPA_TILES)
    call MULT_HL_POR_DE       ; HL = (ANCHO_MAPA * MAPA_Y)
    ld bc, (DM_MAPX)
    add hl, bc                ; HL = MAPA_X + (ANCHO_MAPA * MAPA_Y)
    ex de, hl
    add ix, de                ; IX = Inicio_Mapa + HL
    ;;; FIN NUEVO
    

    ld a, (DM_HEIGHT)
    ld b, a                   ; B = ALTO_EN_TILES (para bucle altura)
 
drawmg16_yloop:
    push bc                   ; Guardamos el valor de B
 
    ld a, (DM_HEIGHT)         ; A = ALTO_EN_TILES
    sub b                     ; A = ALTO - iteracion_bucle = Y actual
    rlca                      ; A = Y * 2
 
    ;;; Calculamos la direccion destino en pantalla como
    ;;; DIR_PANT = DIRECCION(X_INICIAL, Y_INICIAL + Y*2)
    ld bc, (DM_COORD_X)       ; B = DB_COORD_Y y C = DB_COORD_X
    add a, b
    ld b, a
    ld a, b
    and $18
    add a, $40
    ld h, a
    ld a, b
    and 7
    rrca
    rrca
    rrca
    add a, c
    ld l, a                   ; HL = DIR_PANTALLA(X_INICIAL,Y_INICIAL+Y*2)
 
    ld a, (DM_WIDTH)
    ld b, a                   ; B = ANCHO_EN_TILES
 
drawmg16_xloop:
    push bc                   ; Nos guardamos el contador del bucle
 
    ld a, (ix+0)              ; Leemos un byte del mapa
    inc ix                    ; Apuntamos al siguiente byte del mapa
 
    cp 255                    ; Bloque especial a saltar: no se dibuja
    jp z, drawmg16_next

; Aqui voy a meter la rutina para formar el mapa de colisiones
    cp 0
    jp z, marcoConCeros

; Voy a meter aqui el codigo de la pared falsa
    cp 7
    jp z, marcoParedFalsa

; Voy a meter aqui el codigo de la META
    cp 8
    jp z, marcoMeta

; Voy a meter aqui el codigo de las frutas Uvas
    cp 9
    jp z, marcoUvas

; Voy a meter aqui el codigo del chupete
    cp 10
    jp z, marcoChupete

; Voy a meter aqui el codigo del huevo frito 13
    cp 13
    jp z, marcoHuevoFrito

; Voy a meter aqui el codigo del huevo frito 15
    cp 15
    jp z, marcoHuevoFrito


	push AF
    EXX     ;exchanges BC, DE, and HL with shadow registers with BC', DE', and HL'.
    LD A, $01   ;marco con un 1 los bloques ocupados
    LD (DE), a  ;JM
    EXX
    pop AF
    jp sigoConElCodigoOriginal

marcoMeta:
    push AF
    EXX     ;exchanges BC, DE, and HL with shadow registers with BC', DE', and HL'.
    LD A, $08 ;Voy a marcar la Meta con el codigo 8
    LD (DE), a  ;JM
    EXX
    pop AF
    jp sigoConElCodigoOriginal

marcoParedFalsa:
    push AF
    EXX     ;exchanges BC, DE, and HL with shadow registers with BC', DE', and HL'.
    LD A, $07 ;Voy a marcar las Uvas con el codigo 9
    LD (DE), a  ;JM
    EXX
    pop AF
    ld (posUvasMapa),ix ;guardo la posición de las Uvas para borrarlo cuando las toque
    jp sigoConElCodigoOriginal

marcoUvas:
    push AF
    EXX     ;exchanges BC, DE, and HL with shadow registers with BC', DE', and HL'.
    LD A, $09 ;Voy a marcar las Uvas con el codigo 9
    LD (DE), a  ;JM
    EXX
    pop AF
    ld (posUvasMapa),ix ;guardo la posición de las Uvas para borrarlo cuando las tope
    jp sigoConElCodigoOriginal

marcoChupete:
    push AF
    EXX     ;exchanges BC, DE, and HL with shadow registers with BC', DE', and HL'.
    LD A, $10 ;Voy a marcar las Uvas con el codigo 10
    LD (DE), a  ;JM
    EXX
    pop AF
    ld (posUvasMapa),ix ;guardo la posición de las Uvas para borrarlo cuando las tope
    jp sigoConElCodigoOriginal

marcoHuevoFrito:
    push AF
    EXX     ;exchanges BC, DE, and HL with shadow registers with BC', DE', and HL'.
    LD A, $13 ;Voy a marcar el huevo frito con el codigo 13
    LD (DE), a  ;JM
    EXX
    pop AF
    ld (posUvasMapa),ix ;guardo la posición de las Uvas para borrarlo cuando las tope
    jp sigoConElCodigoOriginal

marcoConCeros:
    push AF
    EXX     ;exchanges BC, DE, and HL with shadow registers with BC', DE', and HL'.
    LD A, $00
    LD (DE), a  ;JM
    EXX
    pop AF
    
sigoConElCodigoOriginal:
; sigue el codigo original
    ld b, a
    ex af, af'                ; Nos guardamos una copia del bloque en A'
    ld a, b
 
    ;;; Calcular posicion origen (array sprites) en HL como:
    ;;;     direccion = base_sprites + (NUM_SPRITE*32)
    ex de, hl                 ; Intercambiamos DE y HL (DE=destino)
    ld bc, (DM_SPRITES)
    ld l, 0
    srl a
    rr l
    rra
    rr l
    rra
    rr l
    ld h, a
    add hl, bc                ; HL = BC + HL = DM_SPRITES + (DM_NUMSPR * 32)
    ex de, hl                 ; Intercambiamos DE y HL (DE=origen, HL=destino)   
 
    push hl                   ; Guardamos el puntero a pantalla recien calculado
    push hl
 
    ;;; Impresion de los primeros 2 bloques horizontales del tile
 
    ld b, 8
drawmg16_loop1:
 
    ld a, (de)                ; Bloque 1: Leemos dato del sprite
    ld (hl), a                ; Copiamos dato a pantalla
    inc de                    ; Incrementar puntero en sprite
    inc l                     ; Incrementar puntero en pantalla
    ld a, (de)                ; Bloque 2: Leemos dato del sprite
    ld (hl), a                ; Copiamos dato a pantalla
    inc de                    ; Incrementar puntero en sprite
    inc h                     ; Hay que sumar 256 para ir al siguiente scanline
    dec l                     ; pero hay que restar el inc l que hicimos.
    djnz drawmg16_loop1
    inc l                     ; Decrementar el ultimo incrementado en el bucle
 
    ; Avanzamos HL 1 scanline (codigo de incremento de HL en 1 scanline)
    ; desde el septimo scanline de la fila Y+1 al primero de la Y+2
    ld a, l
    add a, 31
    ld l, a
    jr c, drawmg16_nofix_abajop
    ld a, h
    sub 8
    ld h, a
drawmg16_nofix_abajop:
 
    ;;; Impresion de los segundos 2 bloques horizontales:
    ld b, 8
drawmg16_loop2:
    ld a, (de)                ; Bloque 1: Leemos dato del sprite
    ld (hl), a                ; Copiamos dato a pantalla
    inc de                    ; Incrementar puntero en sprite
    inc l                     ; Incrementar puntero en pantalla
    ld a, (de)                ; Bloque 2: Leemos dato del sprite
    ld (hl), a                ; Copiamos dato a pantalla
    inc de                    ; Incrementar puntero en sprite
    inc h                     ; Hay que sumar 256 para ir al siguiente scanline
    dec l                     ; pero hay que restar el inc l que hicimos.
    djnz drawmg16_loop2
 
    ;;; En este punto, los 16 scanlines del tile estan dibujados.
 
    ;;;;;; Impresion de la parte de atributos del tile ;;;;;;
 
    pop hl                    ; Recuperar puntero a inicio de tile
 
    ;;; Calcular posicion destino en area de atributos en DE.
    ld a, h                   ; Codigo de Get_Attr_Offset_From_Image
    rrca
    rrca
    rrca
    and 3
    or $58
    ld d, a
    ld e, l                   ; DE tiene el offset del attr de HL
 
    ld hl, (DM_ATTRIBS)
    ex af, af'                ; Recuperamos el bloque del mapa desde A'
    ld c, a
    ld b, 0
    add hl, bc
    add hl, bc
    add hl, bc
    add hl, bc                ; HL = HL+HL=(DM_NUMSPR*4) = Origen de atributo
 
    ldi
    ldi                       ; Imprimimos la primeras fila de atributos
 
    ;;; Avance diferencial a la siguiente linea de atributos
    ld a, e                   ; A = E
    add a, 30                 ; Sumamos A = A + 30 mas los 2 INCs de ldi.
    ld e, a                   ; Guardamos en E (E = E+30 + 2 por ldi=E+32)
    jr nc, drawmg16_att_noinc
    inc d
drawmg16_att_noinc:
    ldi
    ldi                       ; Imprimimos la segunda fila de atributos
 
    pop hl                    ; Recuperamos el puntero al inicio
 
drawmg16_next:
    inc l                     ; Avanzamos al siguiente tile en pantalla
    inc l                     ; horizontalmente
    EXX
	INC de  ;JM
    EXX
    ;INC IY  ;JM
    pop bc                    ; Recuperamos el contador para el bucle
    dec b                     ; djnz se sale de rango, hay que usar DEC+jp
    jp nz, drawmg16_xloop
 
    ;;; NUEVO: Incrementar puntero de mapa a siguiente linea
    ;ld bc, ANCHO_MAPA_TILES - ANCHO_PANTALLA :Aqui es contante

    push hl
    ld hl, (ANCHO_MAPA_TILES) ; ahora que lo hemos definido como variable lo resolvemos asi
    ld de, ANCHO_PANTALLA
    sbc hl,de
    push hl ; guardo el resultado en la pila para pasarlo a bc
    pop bc
    pop hl
    

    add ix, bc
    ;;; FIN NUEVO
 
    ;;; En este punto, hemos dibujado ANCHO tiles en pantalla (1 fila)
    pop bc
    dec b                     ; Bucle vertical
    jp nz, drawmg16_yloop
 
    ret


;-------------------------------------------------------------
; Incrementar la variable DM_MAPX para scrollear a la derecha.
;-------------------------------------------------------------
MueveMapaIX:
    ld hl, (DM_MAPX)
 
    ;;; Comparacion 16 bits de HL y (ANCHO_MAPA-ANCHO_PANTALLA)
    ;ld a, h
    ;CP (ANCHO_MAPA_TILES-ANCHO_PANTALLA) / 256 ; Esta ANCHO_MAPA_TILES definido como constante
    ; tengo que solo tendría sentido si tengo más de 256 bloques o sea, mas de 16 pantallas.
    ; como no lo voy a tener, lo voy a comentar para saltarlo.

    ;PUSH HL
    ;LD HL, (ANCHO_MAPA_TILES)
    ;PUSH DE
    ;LD DE, ANCHO_PANTALLA
    ;SBC HL, DE
    ;POP DE
    ;POP HL

    ;ret nz

    ; Este seria como el caso de tener menos de 16 pantallas que tengo que resolver
    ; Preguntar al creador, creo que seria un caso muy raro que casi nunca se daria.
    ; Si tengo menos de 16 pantallas, el resultado siempre sera 0
    ;ld a, l
    ;CP (ANCHO_MAPA_TILES-ANCHO_PANTALLA) % 256
    ;ret z
 
    inc hl                     ; No eran iguales, podemos incrementar.
    ld (DM_MAPX), hl
   
    ret
 
;-------------------------------------------------------------
; Incrementar la variable DM_MAPY para scrollear hacia abajo.
;-------------------------------------------------------------
Map_Inc_Y:
    ld hl, (DM_MAPY)
 
    ;;; Comparacion 16 bits de HL y (ALTO_MAPA-ALTO_PANTALLA)
    ld a, h
    CP (ALTO_MAPA_TILES-ALTO_PANTALLA) / 256
    ret nz
    ld a, l
    CP (ALTO_MAPA_TILES-ALTO_PANTALLA) % 256
    ret z
 
    inc hl                     ; No eran iguales, podemos incrementar.
    ld (DM_MAPY), hl
    ret
 
;-------------------------------------------------------------
; Decrementar la variable DM_MAPX para scrollear a la izq.
;-------------------------------------------------------------
Map_Dec_X:
    ld hl, (DM_MAPX)
    ld a, h
    and a
    jr nz, mapdecx_doit2        ; Verificamos que DM_MAPX no sea 0
    ld a, l
    and a
    ret z
    mapdecx_doit2:
    dec hl
    ld (DM_MAPX), hl           ; No es cero, podemos decrementar
    ret
 
;-------------------------------------------------------------
; Decrementar la variable DM_MAPY para scrollear hacia arriba.
;-------------------------------------------------------------
Map_Dec_Y:
    ld hl, (DM_MAPY)
    ld a, h
    and a
    jr nz, mapdecy_doit        ; Verificamos que DM_MAPX no sea 0
    ld a, l
    and a
    ret z
    mapdecy_doit:
    dec hl
    ld (DM_MAPY), hl           ; No es cero, podemos decrementar
    ret


;-------------------------------------------------------------
; DrawSprite_16x16_LD:
; Imprime un sprite de 16x16 pixeles con o sin atributos.
;
; Entrada (paso por parametros en memoria):
; Direccion   Parametro
; Direccion        Parametro
; (DS_SPRITES)      Direccion de la tabla de Sprites
; (DS_ATTRIBS)      Direccion de la tabla de Atribs  (0=no atributos)
; (DS_COORD_X)      Coordenada X en baja resolucion
; (DS_COORD_Y)      Coordenada Y en baja resolucion
; (DS_NUMSPR)       Numero de sprite a dibujar (0-N)
;-------------------------------------------------------------
DrawSprite_16x16_LD:
 
    ; Guardamos en BC la pareja (x,y) -> B=COORD_Y y C=COORD_X
    ld bc, (DS_COORD_X) ; lo cambio
 
    ;;; Calculamos las coordenadas destino de pantalla en DE:
    ld a, b
    and $18
    add a, $40
    ld d, a
    ld a, b
    and 7
    rrca
    rrca
    rrca
    add a, c
    ld e, a
 
    push de           ; Lo guardamos para luego, lo usaremos para
                      ; calcular la direccion del atributo
 
    ;;; Calcular posicion origen (array sprites) en HL como:
    ;;;     direccion = base_sprites + (NUM_SPRITE*32)
    ;;; Multiplicamos con desplazamientos, ver los comentarios.
    ld bc, (DS_SPRITES)
    ld a, (DS_NUMSPR)
    ld l, 0           ; AL = DS_NUMSPR*256
    srl a             ; Desplazamos a la derecha para dividir por dos
    rr l              ; AL = DS_NUMSPR*128
    rra               ; Rotamos, ya que el bit que salio de L al CF fue 0
    rr l              ; AL = DS_NUMSPR*64
    rra               ; Rotamos, ya que el bit que salio de L al CF fue 0
    rr l              ; AL = DS_NUMSPR*32
    ld h, a           ; HL = DS_NUMSPR*32
    add hl, bc        ; HL = BC + HL = DS_SPRITES + (DS_NUMSPR * 32)
                      ; HL contiene la direccion de inicio en el sprite
 
    ex de, hl         ; Intercambiamos DE y HL (DE=origen, HL=destino)
 
    ;;; Repetir 8 veces (primeros 2 bloques horizontales):
    ld b, 8
 
drawsp16x16_loop1:
    ld a, (de)         ; Bloque 1: Leemos dato del sprite
    ld (hl), a         ; Copiamos dato a pantalla
    inc de             ; Incrementar puntero en sprite
    inc l              ; Incrementar puntero en pantalla
 
    ld a, (de)         ; Bloque 2: Leemos dato del sprite
    ld (hl), a         ; Copiamos dato a pantalla
    inc de             ; Incrementar puntero en sprite
 
    inc h              ; Hay que sumar 256 para ir al siguiente scanline
    dec l              ; pero hay que restar el inc l que hicimos.
    djnz drawsp16x16_loop1
 
    ; Avanzamos HL 1 scanline (codigo de incremento de HL en 1 scanline)
    ; desde el septimo scanline de la fila Y+1 al primero de la Y+2
 
    ;;;inc h           ; No hay que hacer inc h, lo hizo en el bucle
    ;;;ld a, h         ; No hay que hacer esta prueba, sabemos que
    ;;;and 7           ; no hay salto (es un cambio de bloque)
    ;;;jr nz, drawsp16_nofix_abajop
    ld a, l
    add a, 32
    ld l, a
    jr c, drawsp16_nofix_abajop
    ld a, h
    sub 8
    ld h, a
 
drawsp16_nofix_abajop:
 
    ;;; Repetir 8 veces (segundos 2 bloques horizontales):
    ld b, 8
 
drawsp16x16_loop2:
    ld a, (de)         ; Bloque 1: Leemos dato del sprite
    ld (hl), a         ; Copiamos dato a pantalla
    inc de             ; Incrementar puntero en sprite
    inc l              ; Incrementar puntero en pantalla
 
    ld a, (de)         ; Bloque 2: Leemos dato del sprite
    ld (hl), a         ; Copiamos dato a pantalla
    inc de             ; Incrementar puntero en sprite
 
    inc h              ; Hay que sumar 256 para ir al siguiente scanline
    dec l              ; pero hay que restar el inc l que hicimos.
    djnz drawsp16x16_loop2
 
    ;;; En este punto, los 16 scanlines del sprite estan dibujados.
 
    pop bc

;;; Considerar el dibujado de los atributos (Si DS_ATTRIBS=0 -> ret)
    ld hl, (DS_ATTRIBS)
 
    xor a              ; A = 0
    add a, h           ; A = 0 + H = H
    ret z              ; Si H = 0, volver (no dibujar atributos)
 
    ;;; Calcular posicion destino en area de atributos en DE.
    ld a, b            ; Codigo de Get_Attr_Offset_From_Image
    rrca               ; Obtenemos dir de atributo a partir de
    rrca               ; dir de zona de imagen.
    rrca               ; Nos evita volver a obtener X e Y
    and 3              ; y hacer el calculo completo de la
    or $58             ; direccion en zona de atributos
    ld d, a
    ld e, c            ; DE tiene el offset del attr de HL
 
    ld a, (DS_NUMSPR)  ; Cogemos el numero de sprite a dibujar
    ld c, a
    ld b, 0
    add hl, bc         ; HL = HL+DS_NUMSPR
    add hl, bc         ; HL = HL+DS_NUMSPR*2
    add hl, bc         ; HL = HL+DS_NUMSPR*3
    add hl, bc         ; HL = HL+HL=(DS_NUMSPR*4) = Origen de atributo
 
    ldi
    ldi                ; Imprimimos las 2 primeras filas de atributo
 
    ;;; Avance diferencial a la siguiente linea de atributos
    ld a, e            ; A = L
    add a, 30          ; Sumamos A = A + 30 mas los 2 INCs de ldi.
    ld e, a            ; Guardamos en L (L = L+30 + 2 por ldi=L+32)
    jr nc, drawsp16x16_attrab_noinc
    inc d
drawsp16x16_attrab_noinc:
    ldi
    ldi
    
ret

; Variables que usaremos como parámetros
DS_SPRITESM  DEFW   0
DS_ATTRIBSM  DEFW   0
DS_COORD_XM  DEFB   0
DS_COORD_YM  DEFB   0
DS_NUMSPRM   DEFB   0
DS_WIDTHM    DEFB   0
DS_HEIGHTM   DEFB   0

;-------------------------------------------------------------
; DrawSprite_MxN_LD:
; Imprime un sprite de MxN pixeles con o sin atributos.
; Maximo, 16x15 / 15x16 bloques de ancho x alto caracteres.
;
; Entrada (paso por parametros en memoria):
; Direccion   Parametro
; Direccion        Parametro
; (DS_SPRITES)      Direccion de la tabla de Sprites
; (DS_ATTRIBS)      Direccion de la tabla de Atribs  (0=no atributos)
; (DS_COORD_X)      Coordenada X en baja resolucion
; (DS_COORD_Y)      Coordenada Y en baja resolucion
; (DS_NUMSPR)       Numero de sprite a dibujar (0-N)
; (DS_WIDTH)        Ancho del sprite
; (DS_HEIGHT)       Alto del sprite
;-------------------------------------------------------------
DrawSprite_MxN_LD:
 
    ;;; Calcular posicion origen (array sprites) en HL como:
    ;;;     direccion = base_sprites + (NUM_SPRITE*ANCHO*ALTO)
 
    ;;;; Multiplicamos ancho por alto (en bloques)
    ld a, (DS_WIDTHM)
    ld c, a
    ld a, (DS_HEIGHTM)
    rlca               ; Multiplicamos por 8, necesitamos
    rlca               ; la altura en pixeles (FILAS*8)
    rlca               ; Y la guardamos porque la necesitaremos:
    ld (drawsp_height), a
 
    ;;; Multiplicamos Ancho_bloques * Alto_pixeles:
    ld b, a
    xor a              ; A = 0
drawsp_mul1:
    add a, c           ; A = A + C   (B veces)  = B*C
    djnz drawsp_mul1   ; B veces -> A = A*C = Ancho * Alto
                        ; Ahora A = Ancho*Alto (maximo 255!!!)
 
    ;;; Multiplicamos DS_NUMSPR por (Ancho_bloques*Alto_pixeles)
    ld b, a            ; Repetimos Ancho * Alto veces
    ld hl, 0
    ld d, h            ; HL = 0
    ld a, (DS_NUMSPRM)
    ld e, a            ; DE = DS_NUMSPR
drawsp_mul2:
    add hl, de         ; HL = HL+DS_NUMSPR
    djnz drawsp_mul2   ; Sumamos HL+DE B veces = DS_NUMSPR*B
 
                        ; guardamos el valor de ancho*alto_pixeles*NUMSPR
    ld (drawsp_width_by_height), hl
 
    ;;; Calculamos direccion origen copia en el sprite
    ld bc, (DS_SPRITESM)
    add hl, bc         ; HL = BC + HL = DS_SPRITES + (DS_NUMSPR*ANCHO*ALTO)
                       ; HL contiene la direccion de inicio en el sprite
 
    ;;; Calculamos las coordenadas destino de pantalla en DE:
 
    ; ld bc, (DS_COORD_XM)     ; B = Y,  C = X originariamente codifica la posicion con un registro de 16 bits
    ld a, (DS_COORD_YM)     
    ld b,a                  ; B = Y
    ld a, (DS_COORD_XM)     ; C = X,    eje x
    ld c,a

    ld a, b
    and $18
    add a, $40
    ld d, a
    ld a, b
    and 7
    rrca
    rrca
    rrca
    add a, c
    ld e, a
    push de            ; Lo guardamos para luego, lo usaremos para
                       ; calcular la direccion del atributo
    ex de, hl          ; Intercambiamos DE y HL (DE=origen, HL=destino)
 
 
    ;;; Bucle de impresión vertical
                        ; Recogemos de nuevo la altura en pixeles
    ld a, (drawsp_height)
    ld b, a            ; Contador del bucle exterior del bucle
 
drawsp_yloop:
    ld c, b            ; Nos guardamos el contador
    
    ;;; Bucle de impresion horizontal
    ld a, (DS_WIDTHM)
    ld b, a
 
    push hl            ; Guardamos en pila inicio de scanline
                        ; para poder volver a el luego
drawsp_xloop:
    ld a, (de)         ; Leemos dato del sprite
    ld (hl), a         ; Copiamos dato a pantalla
    inc de             ; Incrementar puntero en sprite
    inc l              ; Incrementar puntero en pantalla
    djnz drawsp_xloop
    pop hl             ; Recuperamos de pila inicio de scanline
 
    ;;; Avanzamos al siguiente scanline de pantalla
    inc h
    ld a, h
    and 7
    jr nz, drawspNM_nofix
    ld a, l
    add a, 32
    ld l, a
    jr c, drawspNM_nofix
    ld a, h
    sub 8
    ld h, a
drawspNM_nofix:
 
    ld b, c
    djnz drawsp_yloop  ; Repetimos "alto_en_pixeles" veces
 
    ;;; Aqui hemos dibujado todo el sprite, vamos a los attributos
 
    pop bc             ; Recuperamos el offset del primer scanline
 
    ;;; Considerar el dibujado de atributos (Si DS_ATTRIBS=0 -> ret)
    ld  a,[DS_ATTRIBSM+1]     ; para obtener la parte alta de la direccion
    or  a                    ; para comprobar si es 0
    ret z                    ; Si H = 0, volver (no dibujar atributos)
 
    ;;; Calcular posicion destino en area de atributos en DE.
    ld a, b            ; Codigo de Get_Attr_Offset_From_Image
    rrca               ; Obtenemos dir de atributo a partir de
    rrca               ; dir de zona de imagen.
    rrca               ; Nos evita volver a obtener X e Y
    and 3              ; y hacer el calculo completo de la
    or $58             ; direccion en zona de atributos
    ld d, a
    ld e, c            ; DE tiene el offset del attr de HL
    push de            ; Guardamos una copia
 
    ; Recuperamos el valor de ancho_caracteres * alto_en_pixeles * NUMSPR
    ; para ahorrarnos repetir otra vez dos multiplicaciones:
    ld hl, (drawsp_width_by_height)
 
    ;;; HL = ANCHO_BLOQUES*ALTO_PIXELES*NUMSPR
    ;;; El Alto lo necesitamos en BLOQUES, no en píxeles-> dividir /8
    srl h     ; Desplazamos H a la derecha
    rr l      ; Rotamos L a la derecha introduciendo CF
    srl h     ;
    rr l      ;
    srl h     ;
    rr l      ; Resultado : HL = HL >> 3 = HL / 8
 
    ;;;; HL = ANCHO_BLOQUES*ALTO_BLOQUES*NUMSPR
    ld c, l
    ld b, h
    ld hl, (DS_ATTRIBSM)
    add hl, bc         ; HL = Base_Atributos + (DS_NUMSPR*ALTO*ANCHO)
 
    pop de             ; Recuperamos direccion destino
 
    ld a, (DS_HEIGHTM)
    ld b, a
 
    ;;; Bucle impresion vertical de atributos
drawsp_attyloop:
    ld c, b
 
    push de            ; Guardamos inicio de linea de atributos
    ld a, (DS_WIDTHM)
    ld b, a
 
    ;;; Bucle impresion horizontal de atributos
drawsp_attxloop:
    ld a, (hl)         ; Leer atributo del sprite
    inc hl
    ld (de), a         ; Escribir atributo
    inc e
    djnz  drawsp_attxloop
 
    pop de             ; Recuperamos inicio de linea de atributos
 
    ;;; Avance diferencial a la siguiente linea de atributos
    ld a, e
    add a, 32
    ld e, a
    jr nc, drawsp_attrab_noinc
    inc d
drawsp_attrab_noinc:
 
    ld b, c
    djnz drawsp_attyloop
 
    ret
 
drawsp_height          DB 0
drawsp_width_by_height DW 0



; de https://espamatica.com/0x09-ensamblador-zx-spectrum-marciano-partida/
; -----------------------------------------------------------------------------
; Pinta cadenas.
;
; Entrada:  HL = primera posición de memoria de la cadena
;
; Altera el valor de los registros AF y HL
; -----------------------------------------------------------------------------
PrintStringFF:
ld      a, (hl)         ; Carga en A el carácter a pintar
cp      $ff             ; Comprueba si es $FF
ret     z               ; De ser así sale
rst     $10             ; Pinta el carácter
inc     hl              ; Apunta HL al siguiente carácter
jp      PrintStringFF   ; Bucle hasta que termine de pintar la cadena
ret


; sacado de https://espamatica.com/0x0a-ensamblador-zx-spectrum-pong-sonido/#Sonido
; -----------------------------------------------------------------------------
; Sound
; Fichero con los sonidos
; -----------------------------------------------------------------------------
; Punto
C_3: 	  EQU $0D07
C_3_FQ: EQU $0082 / $10

; Pala
C_4: 	  EQU $066E
C_4_FQ: EQU $0105 / $10

; Rebote
C_5: 	  EQU $0326
C_5_FQ: EQU $020B / $10

; -----------------------------------------------------------------------------
; Rutina beeper de la ROM.
;
; Entrada:	HL	=	Nota.
;			      DE	=	Duración.
;
; Altera el valor de los registros AF, BC, DE, HL e IX.
; -----------------------------------------------------------------------------
BEEPER:	EQU $03B5

; -----------------------------------------------------------------------------
; Reproduce el sonido de los rebotes.
; Entrada:	A	=	Tipo de rebote.	1. Punto
;									2. Pala
;									3. Borde
; -----------------------------------------------------------------------------
PlaySound:
ld		a, $03   ; añado esto aqui, antes seleccionaba el sonido antes de la llamada a lo rutina y eso provocaba un bug
; Preserva el valor de los registros
push    de
push    hl

cp      $01					; Evalúa si se emite el sonido de Punto
jr      z, playSound_point	; Si es así salta

cp      $02					; Evalúa si se emite el sonido de Pala
jr      z, playSound_paddle	; Si es así salta

; Se emite el sonido de Borde
ld      hl, C_5			; Carga en HL la nota
ld      de, C_5_FQ	; Carga en DE la duración (frecuencia)
jr      beep				; Salta a emitir el sonido

; Se emite el sonido de Punto
playSound_point:
ld      hl, C_3			; Carga en HL la nota
ld      de, C_3_FQ	; Carga en DE la duración (frecuencia)
jr      beep				; Salta a emitir el sonido

; Se emite el sonido de Pala
playSound_paddle:
ld      hl, C_4			; Carga en HL la nota
ld      de, C_4_FQ	; Carga en DE la duración (frecuencia)

; Hace sonar la nota
beep:
; Preserva el valor de los registros ya que la rutina BEEPER de la ROM los altera
push    af
push    bc
push    ix

call    BEEPER			; Llama a la rutina BEEPER de la ROM

; Recupera el valor de los registros
pop     ix
pop     bc
pop     af

pop     hl
pop     de

ret