;-------------------------------------------------------------
; Este es el archivo principal de código, antes se encuentra la rutina principal y adonde empieza la ejecución del juego.
; No todo el codigo de este archivo es original mio, pero mi intención es mover todo el codigo ajeno a "rutinasPrevias.z80asm".
;-------------------------------------------------------------

.org 35000

; Put your Z80 assembly code into code files <- Comentario creado con el SpectNetIde que indica adonde comienza todo.
Start:

    ld hl, rocasSprites
    ld (DM_SPRITES), hl
    ld hl, rocasAtributos
    ld (DM_ATTRIBS), hl
    ;ld a,0  ; inicializamos el nivel a 0, lo que hace que estemos en el bucle de esperar
    ;ld (DM_NIVEL),a ; No hace falta porque en su definición esa variable vale 0
    
    CALL menu     
bucleMenu:
    CALL leerEdad
    ld a,(DM_NIVEL)
    cp 0
    jp z, bucleMenu ; Si ha cambiado el nivel, nos salimos del bucle y empieza el juego

inicioNivel:
    .loop 20
        halt
    .endl        
	LD HL, mapa_pantalla16x12 ; mapa de colisiones creado por mí 
    LD (DM_MAP10x10), HL  
    ld a, ANCHO_PANTALLA
    ld (DM_WIDTH), a
    ld a, ALTO_PANTALLA
    ld (DM_HEIGHT), a
    xor a
    ld (DM_COORD_X), a
    ld (DM_COORD_Y), a
    ld (DM_MAPX), a            ; Establecemos MaPX, MaPY iniciales = 0
    ld (DM_MAPY), a

CALL pintarBicho ; inicializamos
CALL seleccionarNivel ; elegimos nivel 1
 
redraw:
    call DrawMap_16x16_Map     ; Imprimir pantalla de mapa
    call DrawSprite_16x16_LD ; pintamos el bicho moviendose
    ;call ImpMap10x10 ; Imprimimos el mapa 10x10 (y lo borramos)
    CALL frutasEspeciales ;comprueba si nos hemos comido unas uvas para mayor velocidad
    CALL frutasEspeciales2 ; comprueba si hemos cogido el chupete
    CALL frutasEspeciales4 ; comprueba si hemos cogido la pera
    CALL meterRetardo    ;descomentar antes de versión final
    
bucle:
    xor a
    call LEER_TECLADO          ; Leemos el estado de O, P, Q, A
;    push AF
;    ld a,(joystickDesactivado)
;    CP 1
    CP 0    
    jp z, meSaltoJoystick
;    pop AF
    CALL leerJoystick           ; leemos joystick

meSaltoJoystick:    
    ;pop AF
    bit 0, a                   ; Modificamos MAPX y MAPY segun OPQA
    jr z, nopulsada_q          ; Ya no hace lo descrito arriba sino que va a mis rutinas 
    ;call Map_Dec_Y            ; para comprobar si se puede mover o no
    CALL podemosIrArriba       
    jr redraw
nopulsada_q:
    bit 1, a
    jr z, nopulsada_a
    CALL podemosIrAbajo
    ;call Map_Inc_Y
    jr redraw
nopulsada_a:
    bit 2, a
    jr z, nopulsada_p
	CALL podemosIrDer 
    ;call Map_Inc_X
    jr redraw
nopulsada_p:
    bit 3, a
    jr z, nopulsada_o
    CALL podemosIrIzq
    ;call Map_Dec_X
    jr redraw
nopulsada_o:
    jr bucle
 
leerJoystick: ; sacado de https://espamatica.com/0x0a-ensamblador-zx-spectrum-marciano-joystick/#Joystick
    checkCtrl_Kempston:
    in      a, ($1f)
    checkCtrl_Kempston_right:
    rra
    jr      nc, checkCtrl_Kempston_left
    set     $02, d
    checkCtrl_Kempston_left:
    rra
    jr      nc, checkCtrl_Kempston_abajo
    set     $03, d
    checkCtrl_Kempston_abajo:
    rra
    jr      nc, checkCtrl_Kempston_arriba
    set     $01, d
    checkCtrl_Kempston_arriba:
    rra
    jr      nc, checkCtrl_Kempston_final
    set     $00, d
checkCtrl_Kempston_final:
    ld a,d
RET

podemosIrDer:                  
    

    ld hl, (DS_COORD_Y)
    SRL L   ; ahora si es impar, mira arriba
    jp nc, parDerecha   ; si es par, funciona bien
                        ; ahora es impar y debe mirar abajo
    INC L
    ld de, ANCHO_PANTALLA
    
    call MULT_HL_POR_DE       ; HL = (ANCHO_MAPA * MAPA_Y)
    LD BC, (DS_COORD_X)    
    ld b,0  ; ponemos b a 0 porque sino el calculo se sale de madre.
    INC c ;porque vamos a ver que hay a la derecha
    INC C
    SRL C
    add hl, bc                ; HL = MAPA_X + (ANCHO_MAPA * MAPA_Y)
    ex de, hl
    LD IX, (DM_MAP10x10)   
    add ix, de                ; IX = Inicio_Mapa + HL
    ld a, (IX+0)
    ld c,a
    
    CALL comprobarDestino ; Mira lo que hay en la dirección de la tecla marcada
    
    cp 0               ; comparamos con 0, si es 0 se puede mover. Sino se comprueba lo que hay un bloque arriba y abajo
    ret nz 

parDerecha:
    ld hl, (DS_COORD_Y)  ; repetimos el inicio de la rutina por si los valores se han perdido
    SRL L   ; ahora si es impar, mira arriba
    ld de, ANCHO_PANTALLA
    
    call MULT_HL_POR_DE       ; HL = (ANCHO_MAPA * MAPA_Y)
    ld bc, (DS_COORD_X)
    ld b,0  ; ponemos b a 0 porque sino el calculo se sale de madre.
    INC c ;porque vamos a ver que hay a la derecha
    INC C
    SRL C
    add hl, bc                ; HL = MAPA_X + (ANCHO_MAPA * MAPA_Y)
    ex de, hl
    LD IX, (DM_MAP10x10)   
    add ix, de                ; IX = Inicio_Mapa + HL
    ld a, (IX+0)
    ld c,a

    CALL comprobarDestino ; Mira lo que hay en la dirección de la tecla marcada

    cp 0               ; comparamos con 0, si es 0 se puede mover.
    jp z, moverBichoDerecha
        
RET


moverBichoDerecha:
    
    ld		a, (DS_COORD_X)
    ld      c,a

    ld      a, LIMITE_DERECHA + $01 
    sub     c ;    
    jp z, MueveMapaIX
   
    inc c ;
    ld      a,c
    ld		(DS_COORD_X), a
    
RET 

podemosIrAbajo:
	; vamos a implementar comprobacion antes de ir abajo
	ld hl, (DS_COORD_Y)
    SRL l
    INC hl
    ld de, ANCHO_PANTALLA
    
    call MULT_HL_POR_DE       ; HL = (ANCHO_MAPA * MAPA_Y)
    ld bc, (DS_COORD_X)
    ld b,0  ; ponemos b a 0 porque sino el calculo se sale de madre.
    SRL c ; dividimos por 2
    jp nc, parAbajo ;segun el bit de carry salto o no

    INC C ;si llega aqui es impar, deberia mirar a izq y derecha
            ; con el inc mira a la derecha y falla
            ; asi que voy a duplicar el codigo y luego luego mira a la izquierda
    add hl, bc                ; HL = MAPA_X + (ANCHO_MAPA * MAPA_Y)
    ex de, hl
    LD IX, (DM_MAP10x10)   
    add ix, de                ; IX = Inicio_Mapa + HL
    
    ld a, (IX+0)
    ;exx ;Es necesario porque luego se machaca el valor de A y luego se vuelve a necesitar
    ;ld c,a ; creo que no vale para nadap

; A partir de aqui vamos a comprar con los diversos objetos que nos podemos encontrar
    CALL comprobarDestino

    cp 0               ; comparamos con 0, si es 0 se puede mover.
    ;exx
    jp z, comprobarAbajoIzq
    RET

comprobarAbajoIzq:
    dec c
parAbajo:    
	ld hl, (DS_COORD_Y)
    SRL l
    INC hl
    ld de, ANCHO_PANTALLA
    
    call MULT_HL_POR_DE
    add hl, bc                ; HL = MAPA_X + (ANCHO_MAPA * MAPA_Y)
    ex de, hl
    LD IX, (DM_MAP10x10)   
    add ix, de                ; IX = Inicio_Mapa + HL
    
    ld a, (IX+0)
    ld c,a

; A partir de aqui vamos a comprar con los diversos objetos que nos podemos encontrar
    CALL comprobarDestino

    cp 0               ; comparamos con 0, si es 0 se puede mover.
    jp z, moverBichoAbajo
ret

moverBichoAbajo:
    ld hl,DM_NIVEL
    ld a, (DM_NIVEL)    ;vamos a ver en que nivel estamos
    cp 24
    jp nz,noEsNivel24
    ld		a, (DS_COORD_Y)
    ld      c,a

    ld A, LIMITE_INFERIOR + $01
    sub C
    jp z, Map_Inc_Y

	inc c 
    ld      a,c
    ld		(DS_COORD_Y), a
RET 
    
noEsNivel24:
    ld		a, (DS_COORD_Y)
    ld      c,a
	inc c ;
    ld      a,c
    ld		(DS_COORD_Y), a
ret


podemosIrIzq:
    ld HL, (DS_COORD_Y)
    SRL L
    jp nc, parIzquierda   ; si es par, funciona bien
                        ; ahora es impar y debe mirar abajo
    INC L    
    ld DE, ANCHO_PANTALLA
    CALL MULT_HL_POR_DE                                                   
    
    LD BC, (DS_COORD_X)
    LD B,0
    DEC C
    SRL C
    ADD HL,BC
    EX DE,HL
    LD IX, (DM_MAP10x10)
    ADD IX,DE
    LD A, (IX+0)
    LD C,A

    CALL comprobarDestino ;llamada a rutina para comprobarlo todo

    CP 0
    ret nz

parIzquierda:
    ld hl, (DS_COORD_Y)  ; repetimos el inicio de la rutina por si los valores se han perdido
    SRL L   ; ahora si es impar, mira arriba
    ld de, ANCHO_PANTALLA
    
    call MULT_HL_POR_DE       ; HL = (ANCHO_MAPA * MAPA_Y)
    ld bc, (DS_COORD_X)
    ld b,0  ; ponemos b a 0 porque sino el calculo se sale de madre.
    DEC c ;porque vamos a ver que hay a la izq
    SRL C
    add hl, bc                ; HL = MAPA_X + (ANCHO_MAPA * MAPA_Y)
    ex de, hl
    LD IX, (DM_MAP10x10)   
    add ix, de                ; IX = Inicio_Mapa + HL
    ld a, (IX+0)
    ld c,a

    CALL comprobarDestino ;llamada a rutina para comprobarlo todo

    cp 0               ; comparamos con 0, si es 0 se puede mover.
    jp z, moverBichoIzq  
RET

moverBichoIzq:
    ld		a, (DS_COORD_X)
    ld      c,a

    ld      a, LIMITE_IZQUIERDA + $01 
    sub     c ;    
    jp z, mueveMapaDX
    ret z

    dec c
    ld a,c
    ld		(DS_COORD_X),a
RET

podemosIrArriba:
    ld HL, (DS_COORD_Y)
    DEC L
    SRL L
    LD DE, ANCHO_PANTALLA

    CALL MULT_HL_POR_DE
    LD BC, (DS_COORD_X)
    LD B,0
    SRL C ;en C tengo la posición del bicho. Como la posicion del bicho va en bloques de 8x8 y el mapa de colisiones va de 16x16, la tengo que dividir por dos
    jp nc, parArriba ;segun el bit de carry salto o no

    ;consideramos que C era impar    
    INC C ;si llega aqui es impar, deberia mirar a izq y derecha

    ADD HL,BC  ;si salta continua la ejecución normal del programa
    EX DE,HL
    LD IX,(DM_MAP10x10)
    ADD IX,DE

    LD A,(IX+0)
    EXX ; Si no se hace esto para guardar el valor de C, luego da problema a la hora de ir arriba
    LD C,A

    CALL comprobarDestino ;llamada a rutina para comprobarlo todo

    CP 0
    EXX
    jp z, comprobarArribaIzq
RET

comprobarArribaIzq:
    dec C
parArriba: ;si C era par no hacemos nada
    ld HL,(DS_COORD_Y)
    DEC HL
    SRL L
    LD DE,ANCHO_PANTALLA

    CALL MULT_HL_POR_DE
    ADD HL,BC
    EX DE,HL
    LD IX,(DM_MAP10x10)
    ADD IX,DE

    LD A,(IX+0)
    LD C,A

    CALL comprobarDestino ;llamada a rutina para comprobarlo todo

    CP 0
    jp z, moverBichoArriba
    

RET

moverBichoArriba:
    ld a, (DM_NIVEL)    ;vamos a ver en que nivel estamos
    cp 24
    jp nz,noEsNivel24Arriba
    ld		a, (DS_COORD_Y)
    ld      c,a
    
    ld A,LIMITE_SUPERIOR + $01
    sub C
    jp z, Map_Dec_Y
	
    dec c ;
    ld      a,c
    ld		(DS_COORD_Y), a
RET

noEsNivel24Arriba:
    ld		a, (DS_COORD_Y)
    ld      c,a
    cp 0
    ret z
	dec c ;
    ld      a,c
    ld		(DS_COORD_Y), a

RET

;-------------------------------------------------------------
; Incrementar la variable DM_MAPX para scrollear a la derecha.
;-------------------------------------------------------------
MueveMapaDX:
    ld hl, (DM_MAPX)
    ld a, h
    and a
    jr nz, mapdecx_doit        ; Verificamos que DM_MAPX no sea 0
    ld a, l
    and a
    ret z
    mapdecx_doit:
    dec hl
    ld (DM_MAPX), hl           ; No es cero, podemos decrementar
    
RET




; Definimos los limites, cuando se alcance se pondra en marcha el scroll
LIMITE_IZQUIERDA:	EQU $01
LIMITE_DERECHA:     EQU $11     ;Con un valor par puede que se coma bloques
LIMITE_SUPERIOR:    EQU $01
LIMITE_INFERIOR:    EQU $13


 
;-------------------------------------------------------------
DM_SPRITES  DEFW   0
DM_ATTRIBS  DEFW   0
DM_MAP      DEFW   0
DM_MAP10x10 DEFW   0 ;JM
DM_COORD_X  DEFB   0
DM_COORD_Y  DEFB   0
DM_WIDTH    DEFB   0
DM_HEIGHT   DEFB   0
DM_MAPX     DEFW   0
DM_MAPY     DEFW   0
DM_NIVEL    DEFB   0
 
;-------------------------------------------------------------
; Algunos valores hardcodeados para el ejemplo, en la rutina
; final se puede utilizar DM_WIDTH y DM_HEIGHT.
;-------------------------------------------------------------
;ANCHO_MAPA_TILES       EQU   48
;ALTO_MAPA_TILES        EQU   12
ANCHO_MAPA_TILES       DEFW     0
ALTO_MAPA_TILES        DEFW     0 
ANCHO_PANTALLA         EQU   16
ALTO_PANTALLA          EQU   12

 
;;; Rutina de la ROM del Spectrum, en otros sistemas
;;; sustituir por una rutina especifica de multiplicacion
MULT_HL_POR_DE         EQU   $30a9
 


pintarBicho:
    ld hl, bicho_gfx
    ld (DS_SPRITES), hl
    ld hl, bicho_attrib
    ld (DS_ATTRIBS), hl
    ld a, 4
    ld (DS_COORD_X), a
    ld a, 4
    ld (DS_COORD_Y), a
    xor a
    ld (DS_NUMSPR), a
    call DrawSprite_16x16_LD
ret




DS_SPRITES  DEFW   0
DS_ATTRIBS  DEFW   0
DS_COORD_X  DEFB   0
DS_COORD_Y  DEFB   0
DS_NUMSPR   DEFB   0

FrutaUvasVar    DEFB 0      ; indica que hay que aplicar algún efecto
FrutaUvasReset  DEFB 0      ; indica que hay que resetear un efecto cuando empiece un nuevo nivel
posUvasMapa     DEFW   0
posMetaMapa     DEFW   0    ; usada para borrar el coche Meta tras cogerlo
joystickDesactivado DEFB 0      ; para controlar el joystick


 
;#include "imprimirMapaColisiones.z80asm"
#include "mapas.z80asm"
#include "graficos.z80asm"
#include "rutinasPrevias.z80asm"
#include "frutasEspeciales.z80asm"
#include "cadenasTexto.z80asm"
#include "menu.z80asm"
#include "meta.z80asm"
#include "niveles.z80asm"
#include "marcandoBloquesEspeciales.z80asm"
;#include "voz1.z80asm"
;#include "voz2.z80asm"